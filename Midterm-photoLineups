//********************************************************************************************
//Midterm Problems
//Jessica Sites
//5/22/20
//********************************************************************************************
//Problem 1: Write a program that lists all ways people can line up for a photo
//(all permutations of a list of Strings). The program will read a list of one 
// word names (until -1), and use a recursive method to create and output all
//possible orderings of those names, one ordering per line.
//********************************************************************************************
import java.util.Scanner;
import java.util.ArrayList;

public class PhotoLineups {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		ArrayList<String> nameList = new ArrayList<String>();
		ArrayList<String> permList = new ArrayList<String>();

		// TODO: Read in a list of names; stop when -1 is read. Then call recursive
		// method.
		System.out.println("Enter names, separated by a space. -1 to exit :");
		String name = scanner.next();

		while (!name.equals("-1")) {
			nameList.add(name);
			name = scanner.next();
		}
		allPermutations(permList, nameList);
	}

	// TODO: Write method to create and output all permutations of the list of
	// names.

	public static void allPermutations(ArrayList<String> permList, ArrayList<String> nameList) {

		int i;
		int size = nameList.size();

		if (size == 0) {

			for (i = 0; i < permList.size(); i++) {
				System.out.print(permList.get(i) + " ");
			}
			System.out.println();
		} else {
			for (i = 0; i < size; ++i) {
				ArrayList<String> newPerms = new ArrayList<String>(permList);
				newPerms.add(nameList.get(i));
				ArrayList<String> newNames = new ArrayList<String>(nameList);
				newNames.remove(i);
				allPermutations(newPerms, newNames);
			}
		}
	}
}

